name: Solar System Workflow

on: 
  workflow_dispatch: null
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        container:
          image: node:20
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20
      
        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      #- name: Setup NodeJS Version
      #  uses: actions/setup-node@v3
      #  with:
      #    node-version: 18
          
      - name: Install Dependencies
        run: npm install
          
      - name: Unit Testing
        continue-on-error: true
        run: npm run coverage
                
      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5
        
    docker:
      name: Containerization
      needs: [ unit-testing, code-coverage ]
      permissions:
        packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        
        #- name: Dockerhub Login
        #  uses: docker/login-action@v2.2.0
        #  with:
        #    username: ${{ vars.DOCKERHUB_USERNAME }}
        #    password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        #- name: Docker Build for testing
        #  uses: docker/build-push-action@v4
        #  with:
        #    context: .
        #    push: false
        #    tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
        
        #- name: Docker Image testing
        #  run: |
        #    docker images
        #    docker run --name solar-system-app -d \
        #      -p 3000:3000 \
        #      -e MONGO_URI=$MONGO_URI \
        #      -e MONGO_USERNAME=$MONGO_USERNAME \
        #      -e MONGO_PASSWORD=$MONGO_PASSWORD \
        #      ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                 
        #    export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
        #    echo $IP
        
        #    echo Testing Image URL using wget
        #    wget -q -O - 127.0.0.1:3000/live | grep live
              
        - name: Container Registry Push v1
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
        #      ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      environment:
        name: development
      steps:
        - uses: actions/checkout@v4
        - uses: azure/setup-kubectl@v3
          with:
            version: v1.26.0
        - uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        - run: kubectl version --short -o yaml
        - run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
        - uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: '${{ vars.NAMESPACE }}'
            REPLICAS: '${{ vars.REPLICAS }}'
            IMAGE: ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
            INGRESS_IP: '${{ env.INGRESS_IP }}'
        - run: cat kubernetes/development/*.yaml